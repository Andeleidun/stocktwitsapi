{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Header","className","AppBar","position","Toolbar","Typography","variant","React","Component","CardTemplate","Card","this","props","classGiven","CardContent","src","message","user","avatar_url","name","username","body","App","chips","tweets","content","state","symbols","input","error","interval","undefined","currentCount","loading","handleChange","bind","handleSubmit","timer","symbol","push","Badge","badgeContent","length","Chip","label","intervalId","setInterval","setState","newCount","submitRequest","clearInterval","setTimer","tweetsFound","tweet","proxiedRequest","url","options","headers","fetch","then","res","json","catch","concat","finalUrl","data","messages","renderChips","renderTweets","newSymbols","toUpperCase","replace","split","formattedSymbols","key","retrieveTweets","event","target","value","preventDefault","CircularProgress","TextField","id","onChange","InputProps","startAdornment","InputAdornment","Button","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.49e1872c.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Chip from '@material-ui/core/Chip';\nimport Badge from '@material-ui/core/Badge';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"app-header\">\n        <AppBar position=\"static\">\n          <Toolbar className=\"title-bar\">\n            <Typography variant=\"h1\">\n              StockTwits Live Feed\n            </Typography>\n          </Toolbar>\n        </AppBar>\n      </header>\n    );\n  }\n}\n\nclass CardTemplate extends React.Component {\n  render() {\n    return (\n      <Card className={this.props.classGiven}>\n        <CardContent>\n          <figure className=\"picture\">\n            <img src={this.props.message.user.avatar_url} />\n          </figure>\n          <Typography variant=\"body1\" className=\"namearea\">\n            <span className=\"name\">{this.props.message.user.name}</span> <span className=\"username\">@ {this.props.message.user.username}</span>\n          </Typography>\n          <Typography variant=\"body1\" className=\"text\">\n            {this.props.message.body}\n          </Typography>\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      symbols: [],\n      input: '',\n      error: '',\n      interval: undefined,\n      currentCount: 5,\n      loading: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.timer = this.timer.bind(this);\n  }\n\n  chips = [];\n  tweets = [];\n  content = [];\n\n  renderChips(symbols) {\n    let chips = [];\n    for (let symbol of symbols) {\n      if (symbol.tweets) {\n        chips.push(\n          <Badge badgeContent={symbol.tweets.length} className=\"badge\">\n            <Chip\n              label={symbol.label}\n              className=\"chip\" \n            />\n          </Badge>\n        )\n      }\n      this.chips = chips;\n    }\n  }\n\n  setTimer() {\n    let intervalId = setInterval(this.timer, 60000);\n    this.setState({\n      interval: intervalId,\n      currentCount: 5\n    });\n  }\n\n  timer() {\n    let newCount = this.state.currentCount - 1;\n    if (newCount >= 0) {\n      this.setState({ currentCount: newCount })\n    } else {\n      this.submitRequest();\n      clearInterval(this.state.interval);\n      this.setTimer();\n    }\n  }\n\n  renderTweets(symbols) {\n    let tweets = [];\n    let tweetsFound = 0;\n    for (let symbol of symbols) {\n      if (symbol.tweets) {\n        tweetsFound++;\n        for (let tweet of symbol.tweets)\n        tweets.push(\n          <CardTemplate\n            classGiven=\"card\"\n            message={tweet}\n          />\n        );\n      }\n    }\n    if (tweetsFound > 0) {\n      this.setTimer();\n    }\n    this.tweets = tweets;\n  }\n\n  async retrieveTweets(symbols) {\n    {/* Retrieves images from StockTwits using open cors-anywhere proxy */}\n    this.setState({ loading: true });\n    const proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n    const urlBase = 'https://api.stocktwits.com/api/2/streams/symbol/';\n    const urlEnd = '.json';\n    const proxiedRequest = (url, options = {headers: {}}) =>\n    fetch(url, {\n      ...options,\n      headers: {\n        ...options.headers,\n        'X-Requested-With': 'stock-twits-live-feed',\n      },\n    })\n    .then(res => res.json())\n    .catch(error => this.setState({ error: error}));\n    for (let symbol of symbols) {\n      symbol.url = urlBase.concat(symbol.label).concat(urlEnd);\n      let finalUrl = proxyUrl.concat(symbol.url);\n      await proxiedRequest(finalUrl)\n        .then((data) => {\n          symbol.tweets = data.messages;\n        })\n        .catch(error => this.setState({ error: error}));\n    }\n    if (!this.state.error) {\n      this.renderChips(symbols);\n      this.renderTweets(symbols);\n    }\n    this.setState({ loading: false });\n    return(symbols);\n  }\n\n  async submitRequest() {\n    const newSymbols = this.state.input.toUpperCase().replace(/\\s+/g, '').split(\",\");\n    let formattedSymbols = [];\n    let key = 0;\n    for (let symbol of newSymbols) {\n      formattedSymbols.push(\n        {key: key, label: symbol, tweets: 0}\n      );\n      key++;\n    }\n    formattedSymbols = await this.retrieveTweets(formattedSymbols);\n    this.setState({symbols: formattedSymbols});\n  }\n\n  handleChange(event) {\n    this.setState({input: event.target.value});\n  }\n\n  async handleSubmit(event) {\n    this.submitRequest();\n    event.preventDefault();\n  }\n\n  render() {\n    if (this.state.loading) {\n      this.content = <CircularProgress />;\n    } else if (this.state.error) {\n      this.content = <p>{this.state.error}</p>\n    } else {\n      this.content = (\n        <section className=\"content\">\n          <section className=\"chips\">\n            {this.chips}\n          </section>\n          <section className=\"tweets\">\n            {this.tweets}\n          </section>\n        </section>\n      );\n    }\n    return (\n      <div className=\"App\">\n        <Header />\n        <main className=\"app-main\">\n          <section className=\"search\">\n            <form>\n              <TextField\n                className=\"stock-input\"\n                id=\"stock-symbols\"\n                label=\"Input stock symbols (separate with a comma)\"\n                value={this.state.input}\n                onChange={this.handleChange}\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position=\"start\">\n                      $\n                    </InputAdornment>\n                  ),\n                }}\n              />\n              <br />\n              <Button className=\"search-button\" variant=\"contained\" onClick={this.handleSubmit}>Search</Button>\n            </form>\n          </section>\n          {this.content}\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}